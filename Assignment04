Q1. Explain Class and Object with respect to Object-Oriented Programming. Give a suitable example.
ANS- Object − Objects have states and behaviors. Example: A dog has states - color, name, breed as
well as behaviors – wagging the tail, barking, eating. An object is an instance of a class.
Class − A class can be defined as a template/blueprint that describes the behavior/state that the 
object of its type support.

Q2. Name the four pillars of OOPs.
ANS-  Inheritance, Polymorphism, Encapsulation and Abstraction.

Q3. Explain why the __init__() function is used. Give a suitable example.
ANS-  __init__ function is used to initialise the attributes/properties of the class.
EXAMPLE- take PERSON as a class then their attributes are AGE,NAME,ADDRESS etc.

Q4. Why self is used in OOPs?
ANS-  The use of self makes it easier to distinguish between instance attributes (and methods) from local variables.

Q5. What is inheritance? Give an example for each type of inheritance.
ANS- Inheritance is a mechanism of acquiring the features and behaviors of a class by another class.
The class whose members are inherited is called the base class, and the class that inherits those members
is called the derived class.

SINGLE INHERITANCE

class Parent:
    def func1(self):
        print("This function is in parent class.")
class Child(Parent):
    def func2(self):
        print("This function is in child class.")
object = Child()
object.func1()
object.func2()

MULTIPLE INHERITANCE

class Mother:
    mothername = ""
 
    def mother(self):
        print(self.mothername)
class Father:
    fathername = ""
 
    def father(self):
        print(self.fathername) 
class Son(Mother, Father):
    def parents(self):
        print("Father :", self.fathername)
        print("Mother :", self.mothername)
s1 = Son()
s1.fathername = "RAM"
s1.mothername = "SITA"
s1.parents()

MULTILEVEL INHERITANCE

class Grandfather:
 
    def __init__(self, grandfathername):
        self.grandfathername = grandfathername 
class Father(Grandfather):
    def __init__(self, fathername, grandfathername):
        self.fathername = fathername
 
        # invoking constructor of Grandfather class
        Grandfather.__init__(self, grandfathername)
class Son(Father):
    def __init__(self, sonname, fathername, grandfathername):
        self.sonname = sonname
        Father.__init__(self, fathername, grandfathername)
 
    def print_name(self):
        print('Grandfather name :', self.grandfathername)
        print("Father name :", self.fathername)
        print("Son name :", self.sonname)
s1 = Son('Prince', 'Rampal', 'Lal mani')
print(s1.grandfathername)
s1.print_name()

HIERARCHIAL INHERITANCE

class Parent:
    def func1(self):
        print("This function is in parent class.") 
class Child1(Parent):
    def func2(self):
        print("This function is in child 1.") 
class Child2(Parent):
    def func3(self):
        print("This function is in child 2.")
object1 = Child1()
object2 = Child2()
object1.func1()
object1.func2()
object2.func1()
object2.func3()

HYBRID INHERITANCE

class School:
    def func1(self):
        print("This function is in school.")
class Student1(School):
    def func2(self):
        print("This function is in student 1. ")
class Student2(School):
    def func3(self):
        print("This function is in student 2.")
class Student3(Student1, School):
    def func4(self):
        print("This function is in student 3.")
object = Student3()
object.func1()
object.func2()
